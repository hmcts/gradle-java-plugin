plugins {
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.11.0'
    id "uk.gov.hmcts.java" version "0.3.1"
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.owasp:dependency-check-gradle:5.3.2.1'
    compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.15.0'
    testCompile group: 'commons-io', name: 'commons-io', version: '2.6'
    testCompile group: 'com.google.guava', name: 'guava', version: '28.2-jre'



    testImplementation 'junit:junit:4.12'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava {
    options.compilerArgs += ["-Werror"]
}

def version = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"

group 'uk.gov.hmcts.reform'
project.version version

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'uk.gov.hmcts.java'
            implementationClass = 'uk.gov.hmcts.JavaPlugin'
            displayName = 'HMCTS Java standards plugin'
            description = 'Applies HMCTS Java coding standards'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

pluginBundle {
    website = 'https://github.com/hmcts/gradle-java-plugin'
    vcsUrl = 'https://github.com/hmcts/gradle-java-plugin'
    tags = ['hmcts']
}

ext['gradle.publish.key'] = System.getenv('GRADLE_PLUGIN_PORTAL_KEY')
ext['gradle.publish.secret'] = System.getenv('GRADLE_PLUGIN_PORTAL_SECRET')

// Ensure functional tests depend on these test projects as input.
tasks.functionalTest.inputs.files file('test-projects')
